



#!/bin/bash 
date=\test-20-$(date +%m)\-$(date +%d)
                                                                                                                                                        
fill_vim()
{
    echo " 
#!/bin/sh  

if [ \$# -lt 1   ] ; then 
    echo "FileName to create is required"
    exit 1
fi
FileName=\$1
if [ -e \$FileName   ]; then
    vim \$FileName
    exit 1
fi
echo \"#include <stdio.h>

int main()
{
    return 0; 
}
            
\" > \$FileName
vim \$FileName

exit 0
    " > $1
}

fill_makefile()
{
    echo "# File paths  
SRC_DIR := ./srcs
BUILD_DIR := ./build
OBJ_DIR := \$(BUILD_DIR)/obj
# Compilation flags 
CC := gcc
LD := gcc
CFLAGS := -Wall

# Files to be compiled
SRCS := \$(wildcard \$(SRC_DIR)/*.c)
OBJS := \$(SRCS:\$(SRC_DIR)/%.c=\$(OBJ_DIR)/%.o)
BUILD := \$(OBJS:\$(OBJ_DIR)/%.o=\$(BUILD_DIR)/%)

# Don't remove *.o files automatically
.SECONDARY: \$(OBJS)

all: \$(BUILD)

# Compile each *.c file as *.o files
\$(OBJ_DIR)/%.o: \$(SRC_DIR)/%.c 
    @echo + CC $<
    @mkdir -p \$(OBJ_DIR)
    @\$(CC) \$(CFLAGS) -c -o \$@ $<
                                
# Link each *.o file as executable files
\$(BUILD_DIR)/%: \$(OBJ_DIR)/%.o
    @echo + LD \$@
    @mkdir -p \$(BUILD_DIR)
    @\$(LD) \$(CFLAGS) -o \$@ $<
                                                            
.PHONY: all clean 
clean:
    rm -rf \$(BUILD_DIR)
                                
    " > $1
}
                                                                                                                                                        
############### 开始创建工程 ################
PWD=`pwd`
if [ -e $date ]; then 
    echo " -> 无法创建目录\"$date\": 文件已存在"
    echo " -> $PWD/$date"
    exit 1
fi 
`mkdir $date`
PWD=$PWD/$date
# echo "$PWD"
# `mkdir $PWD/build`
# `touch $PWD/CMakeLists.txt`
 `mkdir $PWD/srcs`
# `touch $PWD/srcs/CMakeLists.txt`
# `mkdir $PWD/objs`
# `mkdir $PWD/libs`
# `mkdir $PWD/test`
# `mkdir $PWD/include`
# `mkdir $PWD/bin`
`touch $PWD/Makefile`
`touch $PWD/srcs/vim.sh`
fill_makefile $PWD/Makefile $1
fill_vim $PWD/srcs/vim.sh $1
chmod u+x $PWD/srcs/vim.sh 
tree $PWD/ 



-----------------------------------

Makefile

#!/bin/bash                                                                

# echo "$name"
# date=$(date)+'-'
date=\test-20-$(date +%m)\-$(date +%d)
# mkdir -p ./$date 

fill_makefile()
{
    echo "
    CROSS?= arm-hisiv100nptl-linux-

    ifeq (\$(origin CROSS), undefined)
    export CROSS=
endif


GCC =  \$(CROSS)gcc
GPP =  \$(CROSS)g++
AR    = \$(CROSS)ar

ROOT_DIR              = .
LIB_DIR                 :=  -L\$(ROOT_DIR)/../lib
LIB_INC_DIR             :=  -I\$(ROOT_DIR)/../include
INC_DIR                 :=  -I\$(ROOT_DIR)/include
SRC_DIR                 :=  \$(ROOT_DIR)/srcs
OBJ_DIR                  :=  \$(ROOT_DIR)/objs
LIB_TAG_DIR             :=  \$(ROOT_DIR)/libs
TEST_DIR             :=  \$(ROOT_DIR)/test
#***源代码文件*********************
SRCS                 :=  \$(shell find \$(SRC_DIR) -name '*.c')
SRCS                 :=  \$(sort \$(SRCS))

TEST                 :=  \$(shell find \$(TEST_DIR) -name '*.c')
TEST                 :=  \$(sort \$(TEST))
#***目标文件*********************
OBJS                 :=  \$(addprefix \$(OBJ_DIR)/,\$(notdir \$(patsubst %.c,%.o,\$(SRCS))))
LIBTARGET             :=  \$(LIB_TAG_DIR)/lib$2.a
LIBTARGET_S             :=  \$(LIB_TAG_DIR)/lib$2.so
TEST_TAG                 :=  \$(TEST_DIR)/example
#***库文件*********************
LDFLAGS              := -lcurl
# Compiler flags, -g for debug, -c to make an object file
#
CFLAGS      = -c -g
CFLAGS_T =    -g
# Ar settings to build the library
ARFLAGS = -rcv

COMPILE =  \$(GCC)  \$(CFLAGS) \"\$<\" -o \$@  \$(LDFLAGS) \$(LIB_DIR) \$(INC_DIR) \$(LIB_INC_DIR)

all:\$(OBJS)
    \$(AR) \$(ARFLAGS) -o \$(LIBTARGET) \$(OBJS)
    \$(GCC) \$(OBJS) -fpic -shared -o \$(LIBTARGET_S)
    @echo \"COMPILE all ok!\"
    \$(GCC)  -o \$(TEST_TAG) \$(TEST) \$(INC_DIR) \$(LIB_INC_DIR)  -L\$(LIB_TAG_DIR) \$(LDFLAGS) \$(LIB_DIR) \$(CFLAGS_T) \$(LIBTARGET)
    @chmod 777 * -R

\$(OBJS):\$(OBJ_DIR)/%.o : \$(SRC_DIR)/%.c
    @echo \"\$< = \$@\"
    \$(GCC)  \"\$<\" -o \"\$@\"  \$(INC_DIR) \$(LIB_INC_DIR) \$(CFLAGS)
    

clean:
    @echo \"rm -f \$(OBJS) \$(LIBTARGET) \$(LIBTARGET_S) \$(TEST_TAG)\"
    @rm -f \$(OBJS) \$(LIBTARGET) \$(LIBTARGET) \$(TEST_TAG)

" > ./$date                                                                
}

#开始创建工程
###########################################################################
PWD=`pwd`
`mkdir $date`
PWD=$PWD/$date 
echo "$PWD"
if [ $CMAKE  ] ;then
      `mkdir $PWD/build`
      `touch $PWD/CMakeLists.txt`
fi

`mkdir $PWD/srcs`
if [ $CMAKE  ] ; then
      `touch $PWD/srcs/CMakeLists.txt`
fi

`mkdir $PWD/objs`

`mkdir $PWD/libs`

`mkdir $PWD/test`

`mkdir $PWD/include`

`mkdir $PWD/bin`

if [ $MAKE  ] ; then
      `touch $PWD/Makefile`
      fill_makefile $PWD/Makefile $date 
fi                                             






######################################

# 从注册表中清理极速输入法
# 打开注册表：win+r --> regedit


